{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"ascii/ascii/","title":"Ascii","text":""},{"location":"ascii/ascii/#carre","title":"Carr\u00e9","text":""},{"location":"ascii/ascii/#triangle","title":"Triangle","text":""},{"location":"ascii/ascii/#sapin","title":"Sapin","text":"<pre><code>def sapin(taille):\n# \u00c9tape 1 : triangle + tronc\n    print(\"sapin 1 :\")\n    print(\" \" * taille + \"^\")  \n    for i in range(1, taille + 1):\n        print(\" \" * (taille - i) + \"/\" + \" \" * (2 * i - 1) + \"\\\\\")\n    for k in range(3):  \n        print(\" \" * (taille - 1) + \"|||\")\n\n\n# \u00c9tape 2 : \u00e9toile\n    print(\"\\nsapin 2 :\")\n    print(\" \" * taille + \"*\")   \n    print(\" \" * taille + \"^\")   \n    for i in range(1, taille + 1):\n        print(\" \" * (taille - i) + \"/\" + \" \" * (2 * i - 1) + \"\\\\\")\n    for k in range(3):\n        print(\" \" * (taille - 1) + \"|||\")\n\n\n# \u00c9tape 3 : texture ' et \"\n    print(\"\\nsapin 3 :\")\n    print(\" \" * taille + \"*\")\n    print(\" \" * taille + \"^\")\n    for i in range(1, taille + 1):\n        ligne = \"\"\n        for j in range(2 * i - 1):\n            if j % 2 == 0:\n                ligne += \"'\"\n            else:\n                ligne += '\"'\n        print(\" \" * (taille - i) + \"/\" + ligne + \"\\\\\")\n    for k in range(3):\n        print(\" \" * (taille - 1) + \"|||\")\n\n\n# \u00c9tape 4 : d\u00e9corations al\u00e9atoires\n    print(\"\\nsapin4! :\")\n    print(\" \" * taille + \"*\")\n    print(\" \" * taille + \"^\")\n    for i in range(1, taille + 1):\n        ligne = \"\"\n        for j in range(2 * i - 1):\n            if random.random() &lt; 0.2:   # 20% chance d'avoir une boule\n                ligne += \"o\"\n            else:\n                ligne += random.choice([\"'\", '\"'])\n        print(\" \" * (taille - i) + \"/\" + ligne + \"\\\\\")\n    for k in range(3):\n        print(\" \" * (taille - 1) + \"|||\")\n\n\n\nsapin(6)\n</code></pre>"},{"location":"ascii/ascii/#projet","title":"Projet","text":""},{"location":"ascii/carre/","title":"Carr\u00e9","text":"<pre><code>def carre_diagonale(n):\n    for i in range(n):\n        ligne = \"\"\n        for j in range(n):\n            if i == 0 or i == n-1 or j == 0 or j == n-1 or i == j :\n                ligne += \"X \"\n            else:\n                ligne += \"  \"\n        print(ligne)\n\ncarre_diagonale(7)\n</code></pre>"},{"location":"ascii/sapin/","title":"Sapin","text":"<pre><code>def sapin(taille):\n# \u00c9tape 1 : triangle + tronc\n    print(\"sapin 1 :\")\n    print(\" \" * taille + \"^\")  \n    for i in range(1, taille + 1):\n        print(\" \" * (taille - i) + \"/\" + \" \" * (2 * i - 1) + \"\\\\\")\n    for k in range(3):  \n        print(\" \" * (taille - 1) + \"|||\")\n\n\n# \u00c9tape 2 : \u00e9toile\n    print(\"\\nsapin 2 :\")\n    print(\" \" * taille + \"*\")   \n    print(\" \" * taille + \"^\")   \n    for i in range(1, taille + 1):\n        print(\" \" * (taille - i) + \"/\" + \" \" * (2 * i - 1) + \"\\\\\")\n    for k in range(3):\n        print(\" \" * (taille - 1) + \"|||\")\n\n\n# \u00c9tape 3 : texture ' et \"\n    print(\"\\nsapin 3 :\")\n    print(\" \" * taille + \"*\")\n    print(\" \" * taille + \"^\")\n    for i in range(1, taille + 1):\n        ligne = \"\"\n        for j in range(2 * i - 1):\n            if j % 2 == 0:\n                ligne += \"'\"\n            else:\n                ligne += '\"'\n        print(\" \" * (taille - i) + \"/\" + ligne + \"\\\\\")\n    for k in range(3):\n        print(\" \" * (taille - 1) + \"|||\")\n\n\n# \u00c9tape 4 : d\u00e9corations al\u00e9atoires\n    print(\"\\nsapin4! :\")\n    print(\" \" * taille + \"*\")\n    print(\" \" * taille + \"^\")\n    for i in range(1, taille + 1):\n        ligne = \"\"\n        for j in range(2 * i - 1):\n            if random.random() &lt; 0.2:   # 20% chance d'avoir une boule\n                ligne += \"o\"\n            else:\n                ligne += random.choice([\"'\", '\"'])\n        print(\" \" * (taille - i) + \"/\" + ligne + \"\\\\\")\n    for k in range(3):\n        print(\" \" * (taille - 1) + \"|||\")\n\n\n\nsapin(6)\n</code></pre>"},{"location":"turtle/exterieur/","title":"le fichier exterieur.py","text":""},{"location":"turtle/exterieur/#le-fichier-en-petites-etapes","title":"le fichier en petites etapes","text":"<p>Le fichier exterieur.py est responsable de touts les dessins qui touchent les objets ext\u00e9rieurs aux batiments et qui ne bouge pas.</p>"},{"location":"turtle/exterieur/#1-la-fonction-dessin_base","title":"1) la fonction <code>dessin_base</code>","text":"<pre><code># les dessins de base\ndef dessin_base(x:int):\n    formes.rectangle(x-100, -100, x+20000, 250, \"#13721e\", True, \"#13721e\")\n    formes.rectangle(x-100, 35, x+20000, 100, \"#323232\", True, \"#323232\")\n    for i in range(1000):\n        formes.ligne(i*20, 85, i*20+10, 85, \"#adadad\")\n</code></pre> <p>Cette fonction prend en charge un argument: - <code>x</code> : la position x du debut ou l'on va cr\u00e9er le parterre et la route</p>"},{"location":"turtle/exterieur/#1-la-fonction-soleil_obj-et-la-fonction-fonction_soleil_lune","title":"1) la fonction <code>soleil_obj</code> et la fonction <code>fonction_soleil_lune</code>","text":"<pre><code># le soleil et la lune\ndef soleil_obj(i:int, soleil:Turtle, screen, type:str, temps:float) -&gt; None:\n    \"\"\" fait bouger le soleil et la lune \"\"\"\n    temps_reste = time.time() - temps\n    if temps_reste &lt;= 5:\n        # effacer l'ancien soleil\n        soleil.clear()\n        soleil_x = (i)*1400 + temps_reste*1400 / 5\n\n\n        # afficher le nouveau\n        if type == \"soleil\":\n            formes.cercle(soleil_x, fonction_soleil_lune(soleil_x), 25, \"#e2d257\", True, \"#ffe312\", soleil)\n        elif type == \"lune\":\n            formes.cercle(soleil_x, fonction_soleil_lune(soleil_x), 25, \"#555555\", True, \"#c1c1c1\", soleil)\n\n\n        screen.ontimer(lambda:soleil_obj(i, soleil, screen, type, temps), 20)\n\n\ndef fonction_soleil_lune(x:int) -&gt; int:\n    \"\"\" calcule l'arc de cercle du soleil \"\"\"\n    return 400 + abs(250 * math.sin(math.pi * x / 1400 ))\n</code></pre> <p>La premi\u00e8re fonction est r\u00e9cursive gr\u00e2ce a ontimer de screen Elle prend en charge des arguments: - <code>i</code> : le nombre de boucles d\u00e9j\u00e0 effectu\u00e9es qui permet de calculer le decalage pour les nombreuses fonctions - <code>soleil</code> : la turtle qui permet de dessiner le soleil et la lune - <code>screen</code> : screen pour permettre de ne pas relancer un grand nombre d'instances de cette classe qui permet de touches a des fonctions de l'ecran - <code>type</code> : une cha\u00eene de caract\u00e8res soit \"soleil\" soit \"lune\" - <code>temps</code> : la seconde a laquelle a debut\u00e9 la premi\u00e8re it\u00e9ration afin de calculer le decalage</p>"},{"location":"turtle/exterieur/#1-la-fonction-lampadaires-et-la-fonction-dessin_lampadaire","title":"1) la fonction <code>lampadaires</code> et la fonction <code>dessin_lampadaire</code>","text":"<pre><code># les lampadaires\ndef lampadaire(i:int) -&gt; None:\n    \"\"\" dessine les lampadaires \"\"\"\n    for k in range(6):\n        dessin_lampadaire(i*1400+100+k*240)\n\n\ndef dessin_lampadaire(x:int) -&gt; None:\n    \"\"\" dessine un lampadaire a x \"\"\"\n    formes.ligne(x, 230, x, 150, \"#606060\")\n    formes.triangle(x-3, 230, x+3, 230, x, 235, \"#606060\", True, \"#606060\")\n</code></pre> <p>Ces fonctions prennent en charge les argument: - <code>i</code> : le nombre de boucles d\u00e9j\u00e0 effectu\u00e9es qui permet de calculer le decalage pour les nombreuses fonctions Pour la premi\u00e8re et  - <code>x</code> : la position a laquelle dessiner le lampadaire Pour la deuxi\u00e8me</p> <p>Ces fonctions permettent de dessiner les lampadaires.</p>"},{"location":"turtle/formes/","title":"le fichier formes.py","text":""},{"location":"turtle/formes/#le-fichier-en-petites-etapes","title":"le fichier en petites etapes","text":""},{"location":"turtle/formes/#1-la-fonction-carre","title":"1) la fonction <code>carre</code>","text":"<p><pre><code>def carre(x:int, y:int, cote:int, color:str, fill:bool=False, fill_color:str=\"#ffffff\", turtle=turtle) -&gt; None:\n    \"\"\" dessine un carre \"\"\"\n    turtle.goto(x, y)\n    turtle.pencolor(color)\n    turtle.pendown()\n    if fill:\n        turtle.fillcolor(fill_color)\n        turtle.begin_fill()\n    turtle.setheading(0)\n    for _ in range(4):\n        turtle.forward(cote)\n        turtle.left(90)\n    if fill:\n        turtle.end_fill()\n    turtle.penup()\n    turtle.update()\n    return None\n</code></pre> Cette fonction prend en charge une grande liste d'arguments :   - <code>x</code> : la position \\(x\\) en haut a gauche du carr\u00e9  - <code>y</code> : la position \\(y\\) en haut a gauche du carr\u00e9  - <code>cote</code> : la longueur d'un cote (par defaut False)  - <code>color</code> : la couleur du carr\u00e9  - <code>fill</code> : un bool\u00e9en qui permet de savoir si on rempli ou pas le carr\u00e9  - <code>fill_color</code> : la couleur de remplissage (par defaut blandc)  - <code>turtle</code> : la turtle qui permet de dessiner le carr\u00e9 (par defaut la turtle de base)</p>"},{"location":"turtle/formes/#1-la-fonction-rectangle","title":"1) la fonction <code>rectangle</code>","text":"<pre><code>def rectangle(x:int, y:int, width:int, height:int, color:str, fill:bool=False, fill_color:str=\"#ffffff\", turtle=turtle) -&gt; None:\n    \"\"\" dessine un rectangle \"\"\"\n    turtle.goto(x, y)\n    turtle.pencolor(color)\n    turtle.pendown()\n    if fill:\n        turtle.fillcolor(fill_color)\n        turtle.begin_fill()\n    turtle.setheading(0)\n    for _ in range(2):\n        turtle.forward(width)\n        turtle.left(90)\n        turtle.forward(height)\n        turtle.left(90)\n    if fill:\n        turtle.end_fill()\n    turtle.penup()\n    turtle.update()\n    return None\n</code></pre> <p>Cette fonction prend en charge une grande liste d'arguments :   - <code>x</code> : la position \\(x\\) en haut a gauche du rectangle  - <code>y</code> : la position \\(y\\) en haut a gauche du rectangle  - <code>width</code> : la largeur du recrangle   - <code>height</code> : la hauteur du rectangle   - <code>color</code> : la couleur du rectangle  - <code>fill</code> : un bool\u00e9en qui permet de savoir si on rempli ou pas le rectangle  - <code>fill_color</code> : la couleur de remplissage (par defaut blandc)  - <code>turtle</code> : la turtle qui permet de dessiner le rectangle (par defaut la turtle de base)</p>"},{"location":"turtle/formes/#1-la-fonction-cercle","title":"1) la fonction <code>cercle</code>","text":"<pre><code>def cercle(x:int, y:int, radius:int, color:str, fill:bool=False, fill_color:str=\"#ffffff\", turtlle=turtle) -&gt; None:\n    \"\"\" dessine un cercle \"\"\"\n    turtlle.setheading(90)\n    turtlle.goto(x - radius, y)\n    turtlle.pencolor(color)\n    turtlle.pendown()\n    if fill:\n        turtlle.fillcolor(fill_color)\n        turtlle.begin_fill()\n    turtlle.circle(radius)\n    if fill:\n        turtlle.end_fill()\n    turtlle.penup()\n    turtle.update()\n    return None\n</code></pre> <p>Cette fonction prend en charge une grande liste d'arguments :   - <code>x</code> : la position \\(x\\) a gauche du cercle  - <code>y</code> : la position \\(y\\) a gauche du cercle  - <code>radius</code> : le rayon du cercle  - <code>color</code> : la couleur du cercle  - <code>fill</code> : un bool\u00e9en qui permet de savoir si on rempli ou pas le cercle  - <code>fill_color</code> : la couleur de remplissage (par defaut blandc)  - <code>turtle</code> : la turtle qui permet de dessiner le cercle (par defaut la turtle de base)</p>"},{"location":"turtle/formes/#1-la-fonction-triangle","title":"1) la fonction <code>triangle</code>","text":"<pre><code>def triangle(x1:int, y1:int, x2:int, y2:int, x3:int, y3:int, color:str, fill:bool=False, fill_color:str=\"#ffffff\", turtle=turtle) -&gt; None:\n    \"\"\" dessine un triangle \"\"\"\n    turtle.goto(x1, y1)\n    turtle.pendown()\n    turtle.pencolor(color)\n    if fill:\n        turtle.fillcolor(fill_color)\n        turtle.begin_fill()\n    turtle.goto(x2, y2)\n    turtle.goto(x3, y3)\n    turtle.goto(x1, y1)\n    if fill:\n        turtle.end_fill()\n    turtle.penup()\n    turtle.update()\n    return None\n</code></pre> <p>Cette fonction prend en charge une grande liste d'arguments :   - <code>x1</code> : la position \\(x\\) du premier point  - <code>y1</code> : la position \\(y\\) du premier point  - <code>x2</code> : la position \\(x\\) du deuxi\u00e8me point  - <code>y2</code> : la position \\(y\\) du deuxi\u00e8me point  - <code>x3</code> : la position \\(x\\) du troisi\u00e8me point  - <code>y3</code> : la position \\(y\\) du troisi\u00e8me point  - <code>color</code> : la couleur du triangle  - <code>fill</code> : un bool\u00e9en qui permet de savoir si on rempli ou pas le triangle  - <code>fill_color</code> : la couleur de remplissage (par defaut blandc)  - <code>turtle</code> : la turtle qui permet de dessiner le triangle (par defaut la turtle de base)</p>"},{"location":"turtle/formes/#1-la-fonction-ligne","title":"1) la fonction <code>ligne</code>","text":"<pre><code>def ligne(x1:int, y1:int, x2:int, y2:int, color:str, turtle=turtle) -&gt; None:\n    \"\"\" trace une ligne en x1, y1, x2, y2 \"\"\"\n    turtle.goto(x1, y1)\n    turtle.pendown()\n    turtle.pencolor(color)\n    turtle.goto(x2, y2)\n    turtle.penup()\n    return None\n</code></pre> <p>Cette fonction prend en charge une grande liste d'arguments :   - <code>x1</code> : la position \\(x\\) du premier point  - <code>y1</code> : la position \\(y\\) du premier point  - <code>x2</code> : la position \\(x\\) du deuxi\u00e8me point  - <code>y2</code> : la position \\(y\\) du deuxi\u00e8me point  - <code>color</code> : la couleur du triangle  - <code>turtle</code> : la turtle qui permet de dessiner le triangle (par defaut la turtle de base)</p>"},{"location":"turtle/formes/#1-la-fonction-trace_porte_arrondie","title":"1) la fonction <code>trace_porte_arrondie</code>","text":"<pre><code>def trace_porte_arrondie(x:int, y:int, color:str, fill_color:str, turtle=turtle):\n    turtle.goto(x, y+35)\n    turtle.pendown()\n    turtle.setheading(-90)\n    turtle.fillcolor(fill_color)\n    turtle.begin_fill()\n    turtle.circle(15)\n    turtle.end_fill()\n    turtle.penup()\n    turtle.goto(x, y)\n    turtle.pencolor(color)\n    turtle.pendown()\n    turtle.begin_fill()\n    turtle.setheading(0)\n    turtle.forward(30)\n    turtle.left(90)\n    turtle.forward(35)\n    turtle.left(90)\n    turtle.penup()\n    turtle.forward(30)\n    turtle.pendown()\n    turtle.left(90)\n    turtle.forward(35)\n    turtle.left(90)\n    turtle.end_fill()\n    turtle.penup()\n    turtle.update()\n    return None\n</code></pre> <p>Cette fonction prend en charge une grande liste d'arguments :   - <code>x</code> : la position \\(x\\) en bas a gauche de la porte  - <code>y</code> : la position \\(y\\) en bas a gauche de la porte  - <code>color</code> : la couleur de la porte  - <code>fill_color</code> : la couleur de remplissage (par defaut blandc)  - <code>turtle</code> : la turtle qui permet de dessiner la porte (par defaut la turtle de base)</p>"},{"location":"turtle/main/","title":"le fichier main.pyw","text":""},{"location":"turtle/main/#le-fichier-en-petites-etapes","title":"le fichier en petites etapes","text":"<p>Ce fichier est la base du projet, son extention .pyw permet de ne pas ouvrir de console lors de son execution.</p> <p>Ce fichier poss\u00e8de plusieures fonctions</p>"},{"location":"turtle/main/#1-la-fonction-lancement","title":"1) la fonction <code>lancement</code>","text":"<p>Cette fonction ne prend pas en charge d'argument</p> <p>cette fonction permet d'initialiser les diff\u00e9rents fichiers et turtles du projet. Elle permet egalement de lancer screen et de mettre des parametres de base.</p> <p>A la fin de celle-ci elle lance la boucle principale et attend sa fermeture</p>"},{"location":"turtle/main/#2-la-fonction-boucle","title":"2) la fonction <code>boucle</code>","text":"<p>Cette fonction est r\u00e9cursive avec la fonction ontimer de screen. Cette fonction prend en charge 3 arguments: - <code>soleil</code> : la turtle qui permet de dessiner le soleil et la lune - <code>i</code> : le nombre de boucles d\u00e9j\u00e0 effectu\u00e9es qui permet de calculer le decalage pour les nombreuses fonctions - <code>screen</code> : screen pour permettre de ne pas relancer un grand nombre d'instances de cette classe qui permet de touches a des fonctions de l'ecran</p> <p>Cette fonction est la boucle principale et elle lance les differentes fonctions de ce projet.</p>"},{"location":"turtle/main/#3-la-fonction-rue","title":"3) la fonction <code>rue</code>","text":"<p>Cette fonction permet de dessiner les immeubles. Elle prend en charge un argument: - <code>i</code> : qui est le nombre de boucles d\u00e9j\u00e0 r\u00e9alis\u00e9es</p> <p>Elle va calculer a partir de ses variables le decalage et lancer la fonction de dessin d'un immeuble 5 fois</p>"},{"location":"turtle/main/#4-la-fonction-deplacement_camera","title":"4) la fonction <code>deplacement_camera</code>","text":"<p>Cette fonction est r\u00e9cursive grace a la fonction ontimer de screen Elle prend en charge 2 arguments:   - <code>i</code> : le deplacement de base avant le decalage   - <code>temps_depart</code> : l'heure a laquelle la fonction a \u00e9t\u00e9 lanc\u00e9e pour la 1ere fois</p> <p>Cette fonction calcule le decalage a appliquer sur la camera en fonction du temps pass\u00e9.</p>"}]}